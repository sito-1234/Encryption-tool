import tkinter as tk
from tkinter import filedialog, messagebox
from cryptography.fernet import Fernet
import os

# Backend code for encryption and decryption (from previous steps)
def generate_key():
    key = Fernet.generate_key()
    with open("secret.key", "wb") as key_file:
        key_file.write(key)

def load_key():
    return open("secret.key", "rb").read()

def encrypt_text(message):
    key = load_key()
    fernet = Fernet(key)
    encrypted_message = fernet.encrypt(message.encode())
    return encrypted_message.decode()

def decrypt_text(encrypted_message):
    key = load_key()
    fernet = Fernet(key)
    decrypted_message = fernet.decrypt(encrypted_message.encode()).decode()
    return decrypted_message

def encrypt_file(filepath):
    key = load_key()
    fernet = Fernet(key)
    with open(filepath, "rb") as file:
        file_data = file.read()
    encrypted_data = fernet.encrypt(file_data)
    with open(filepath + ".encrypted", "wb") as file:
        file.write(encrypted_data)

def decrypt_file(filepath):
    key = load_key()
    fernet = Fernet(key)
    with open(filepath, "rb") as file:
        encrypted_data = file.read()
    decrypted_data = fernet.decrypt(encrypted_data)
    original_filepath = os.path.splitext(filepath)[0]
    with open(original_filepath, "wb") as file:
        file.write(decrypted_data)

# GUI Application
def generate_key_gui():
    generate_key()
    messagebox.showinfo("Key Generated", "A new encryption key has been generated and saved.")

def encrypt_text_gui():
    message = text_entry.get("1.0", tk.END).strip()
    if not message:
        messagebox.showwarning("Input Error", "Please enter some text to encrypt.")
        return
    encrypted_message = encrypt_text(message)
    result_text.delete("1.0", tk.END)
    result_text.insert(tk.END, encrypted_message)

def decrypt_text_gui():
    encrypted_message = text_entry.get("1.0", tk.END).strip()
    if not encrypted_message:
        messagebox.showwarning("Input Error", "Please enter some encrypted text.")
        return
    try:
        decrypted_message = decrypt_text(encrypted_message)
        result_text.delete("1.0", tk.END)
        result_text.insert(tk.END, decrypted_message)
    except Exception as e:
        messagebox.showerror("Decryption Error", "Failed to decrypt. Check the input or the key.")

def encrypt_file_gui():
    filepath = filedialog.askopenfilename()
    if filepath:
        encrypt_file(filepath)
        messagebox.showinfo("File Encrypted", f"File '{filepath}' has been encrypted.")

def decrypt_file_gui():
    filepath = filedialog.askopenfilename()
    if filepath:
        try:
            decrypt_file(filepath)
            messagebox.showinfo("File Decrypted", f"File '{filepath}' has been decrypted.")
        except Exception as e:
            messagebox.showerror("Decryption Error", "Failed to decrypt the file. Check the key or the file.")

# Main GUI setup
app = tk.Tk()
app.title("Text and File Encryption App")
app.geometry("600x500")

# Title label
tk.Label(app, text="Text & File Encryption App", font=("Helvetica", 16)).pack(pady=10)

# Key generation button
key_frame = tk.Frame(app)
key_frame.pack(pady=10)
generate_key_button = tk.Button(key_frame, text="Generate Encryption Key", command=generate_key_gui)
generate_key_button.pack()

# Text encryption/decryption section
text_frame = tk.Frame(app)
text_frame.pack(pady=20)

tk.Label(text_frame, text="Text to Encrypt/Decrypt:").grid(row=0, column=0, columnspan=2)

text_entry = tk.Text(text_frame, height=5, width=50)
text_entry.grid(row=1, column=0, columnspan=2)

encrypt_text_button = tk.Button(text_frame, text="Encrypt Text", command=encrypt_text_gui)
encrypt_text_button.grid(row=2, column=0, pady=10)

decrypt_text_button = tk.Button(text_frame, text="Decrypt Text", command=decrypt_text_gui)
decrypt_text_button.grid(row=2, column=1, pady=10)

# Result for text encryption/decryption
result_text = tk.Text(text_frame, height=5, width=50)
result_text.grid(row=3, column=0, columnspan=2)

# File encryption/decryption section
file_frame = tk.Frame(app)
file_frame.pack(pady=20)

tk.Label(file_frame, text="File Encryption/Decryption:").pack()

encrypt_file_button = tk.Button(file_frame, text="Encrypt File", command=encrypt_file_gui)
encrypt_file_button.pack(side=tk.LEFT, padx=20)

decrypt_file_button = tk.Button(file_frame, text="Decrypt File", command=decrypt_file_gui)
decrypt_file_button.pack(side=tk.LEFT, padx=20)

# Run the application
app.mainloop()

